name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  PLATFORM: linux/amd64
  DOCKER_BUILDKIT: 1

jobs:
  setup_environment:
    name: "1. Environment Setup"
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare Docker
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap

      - name: Start PostgreSQL
        run: |
          docker run -d --name postgres \
            -e POSTGRES_DB=kubsu \
            -e POSTGRES_USER=kubsu \
            -e POSTGRES_PASSWORD=kubsu \
            -p 5432:5432 \
            postgres:14
          until docker exec postgres pg_isready -U kubsu; do sleep 2; done

  build_and_test:
    name: "2. Build & Test"
    needs: setup_environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Build and test
        run: |
          docker buildx build \
            --platform ${{ env.PLATFORM }} \
            --target builder \
            -t myapp:test \
            --load .
          
          docker run --rm \
            --platform ${{ env.PLATFORM }} \
            -e PYTHONPATH=/app \
            --network container:postgres \
            myapp:test \
            python -m pytest tests/

      - name: Build production image
        run: |
          docker buildx build \
            --platform ${{ env.PLATFORM }} \
            -t myapp:latest \
            --load .
          
          docker save myapp:latest -o myapp.tar
          ls -lh myapp.tar

      - uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: myapp.tar

  deploy:
    name: "3. Deployment"
    needs: build_and_test
    runs-on: self-hosted
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Deploy to server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          scp -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_rsa \
              -P ${{ secrets.SSH_PORT }} \
              myapp.tar \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
          
          ssh -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_rsa \
              -p ${{ secrets.SSH_PORT }} \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "podman load -i /tmp/myapp.tar && \
             podman tag myapp:latest myapp:latest && \
             (podman stop myapp || true) && \
             (podman rm myapp || true) && \
             podman run -d \
               --name myapp \
               --network host \
               myapp:latest \
               uvicorn src.main:app --host 0.0.0.0 --port 8089"

  cleanup:
    name: "4. Cleanup"
    needs: deploy
    if: always()
    runs-on: self-hosted
    steps:
      - name: Remove resources
        run: |
          docker stop postgres || true
          docker rm postgres || true
          rm -f ~/.ssh/id_rsa myapp.tar
