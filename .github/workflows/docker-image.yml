name: MYdocker

on:
  push:
    branches: [main]

env:
  PLATFORM: linux/arm64
  DOCKER_BUILDKIT: 1

jobs:
  build-test-deploy:
    runs-on: self-hosted
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker environment
        run: |
          # Создаем директорию для кеша, если не существует
          mkdir -p /tmp/.buildx-cache
          docker buildx create --use
          docker buildx inspect --bootstrap

      - name: Start PostgreSQL container
        run: |
          docker run -d --name postgres \
            -e POSTGRES_DB=kubsu \
            -e POSTGRES_USER=kubsu \
            -e POSTGRES_PASSWORD=kubsu \
            -p 5432:5432 \
            postgres:14
          until docker exec postgres pg_isready -U kubsu; do sleep 2; done

      - name: Initialize DB from dump
        run: |
          docker cp kubsu/dump.sql postgres:/tmp/dump.sql
          docker exec postgres psql -U kubsu -d kubsu -f /tmp/dump.sql

      - name: Build test image with pytest
        run: |
          docker buildx build \
            --platform ${{ env.PLATFORM }} \
            --target builder \
            -t myapp:test \
            --load .

      - name: Run tests
        run: |
          docker run --rm \
            --platform ${{ env.PLATFORM }} \
            -e PYTHONPATH=/app \
            --network container:postgres \
            myapp:test \
            python -m pytest tests/

      - name: Build production image
        run: |
          docker buildx build \
            --platform ${{ env.PLATFORM }} \
            -t myapp:latest \
            --load .
          
          # Явная проверка что образ создан
          docker image inspect myapp:latest

      - name: Save and validate image
        run: |
          docker save myapp:latest -o myapp.tar
          
          if [ ! -s myapp.tar ]; then
            echo "Error: myapp.tar is empty or not created!"
            exit 1
          fi
          
          echo "Image saved successfully:"
          ls -lh myapp.tar

      - name: Deploy to remote server
        run: |
          scp -o StrictHostKeyChecking=no \
              -P ${{ secrets.SSH_PORT }} \
              myapp.tar \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/myapp.tar
          
          ssh -o StrictHostKeyChecking=no \
              -p ${{ secrets.SSH_PORT }} \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "podman load -i /tmp/myapp.tar && \
             podman tag myapp:latest myapp:latest && \
             (podman stop myapp || true) && \
             (podman rm myapp || true) && \
             podman run -d \
               --name myapp \
               --network host \
               myapp:latest \
               uvicorn src.main:app --host 0.0.0.0 --port 8089"

      - name: Cleanup
        if: always()
        run: |
          rm -f myapp.tar
          docker stop postgres || true
          docker rm postgres || true
          rm -f ~/.ssh/id_rsa myapp.tar
