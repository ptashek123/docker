name: MYdocker

on:
  push:
    branches: [main]

jobs:
  build-test-deploy:
    runs-on: macos-12
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: kubsu
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U kubsu"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U kubsu; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Initialize DB from dump
        run: psql postgresql://kubsu:kubsu@localhost:5432/kubsu -f kubsu/dump.sql

      - name: Build and test
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --target builder \
            -t myapp:test \
            --load .
          
          python -m pytest tests

      - name: Build production image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t myapp:latest \
            --load .
          
          docker save myapp:latest > myapp.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: myapp.tar

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to remote server
        run: |
          scp -o StrictHostKeyChecking=no \
              -P ${{ secrets.SSH_PORT }} \
              myapp.tar \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/myapp.tar
          
          ssh -o StrictHostKeyChecking=no \
              -p ${{ secrets.SSH_PORT }} \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "podman load -i /tmp/myapp.tar && \
             podman tag myapp:latest myapp:latest && \
             (podman stop myapp || true) && \
             (podman rm myapp || true) && \
             podman run -d \
               --name myapp \
               -p 8089:8089 \
               -p 8090:8090 \
               myapp:latest \
               uvicorn src.main:app --host 0.0.0.0 --port 8089"
