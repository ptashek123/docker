name: docker

on:
  push:
    branches: [main]

env:
  PLATFORM: linux/amd64
  DOCKER_BUILDKIT: 1

jobs:
  build_and_test:
    name: "Build & Test"
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: kubsu
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready -U kubsu
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --network-alias postgres

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to start..."
          for i in {1..30}; do
            if docker ps | grep postgres; then
              if docker exec postgres pg_isready -U kubsu; then
                echo "PostgreSQL is ready!"
                break
              fi
            fi
            sleep 2
          done

      - name: Initialize DB
        run: |
          docker cp kubsu/dump.sql postgres:/tmp/dump.sql
          docker exec postgres psql -U kubsu -d kubsu -f /tmp/dump.sql

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test
        run: |
          docker buildx build \
            --platform ${{ env.PLATFORM }} \
            --target builder \
            -t myapp:test \
            --load .
          
          docker run --rm \
            --platform ${{ env.PLATFORM }} \
            -e PYTHONPATH=/app \
            --network host \
            -e DB_HOST=localhost \
            myapp:test \
            python -m pytest tests/

      - name: Build production image
        run: |
          docker buildx build \
            --platform ${{ env.PLATFORM }} \
            -t myapp:latest \
            --load .
          
          docker save myapp:latest -o myapp.tar
          ls -lh myapp.tar

      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: myapp.tar
          retention-days: 1

  deploy:
    name: "Deployment"
    needs: build_and_test
    runs-on: self-hosted
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          scp -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_rsa \
              -P ${{ secrets.SSH_PORT }} \
              myapp.tar \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
          
          ssh -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_rsa \
              -p ${{ secrets.SSH_PORT }} \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "podman load -i /tmp/myapp.tar && \
             podman tag myapp:latest myapp:latest && \
             (podman stop myapp || true) && \
             (podman rm myapp || true) && \
             podman run -d \
               --name myapp \
               --network host \
               myapp:latest \
               uvicorn src.main:app --host 0.0.0.0 --port 8089"
